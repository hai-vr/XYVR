# This file is a mashup of several sources, including:
# - https://patriksvensson.se/posts/2020/03/creating-release-artifacts-with-github-actions
# - https://github.com/vrchat-community/template-package/blob/main/.github/workflows/release.yml
# - and some improv

name: .NET

on:
  workflow_dispatch:

env:
  outputAppFolder: "XYVR"
  netCsProjWindows: "ui-webview-windows/ui-webview-windows.csproj"
  netCsProjLinux: "ui-photino-linux/ui-photino-linux.csproj"
  packageName: "dev.hai-vr.xyvr"
  applicationNameWindows: "XYVR"
  applicationNameLinux: "xyvr"

permissions:
  contents: write

jobs:
  build_windows:
    name: Build Windows Executable
    runs-on: windows-latest
    outputs:
      version: ${{ steps.version.outputs.prop }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: get version
        id: version
        uses: notiz-dev/github-action-json-property@7c8cf5cc36eb85d8d287a8086a39dac59628eb31
        with:
          path: "Packages/${{env.packageName}}/package.json"
          prop_path: "version"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install and build React app
        run: |
          cd ui-frontend/src
          npm install
          npm run build-and-copy

      - name: Build
        shell: bash
        run: |
          dotnet publish ${{env.netCsProjWindows}} \
            --runtime win-x64 \
            --self-contained true \
            -c Release \
            -o "App/${{env.outputAppFolder}}"

      - name: Create Executable Zip
        uses: thedoctor0/zip-release@09336613be18a8208dfa66bd57efafd9e2685657
        with:
          type: "zip"
          directory: "App/"
          filename: "../${{ env.applicationNameWindows }}-${{ steps.version.outputs.prop }}-windows-x64-executable.zip"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-executable
          path: "${{ env.applicationNameWindows }}-${{ steps.version.outputs.prop }}-windows-x64-executable.zip"

  build_linux:
    name: Build Linux Executable
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.prop }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: get version
        id: version
        uses: notiz-dev/github-action-json-property@7c8cf5cc36eb85d8d287a8086a39dac59628eb31
        with:
          path: "Packages/${{env.packageName}}/package.json"
          prop_path: "version"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install and build React app
        run: |
          cd ui-frontend/src
          npm install
          npm run build-and-copy

      - name: Build
        run: |
          dotnet publish ${{env.netCsProjLinux}} \
            --runtime linux-x64 \
            --self-contained true \
            -c Release \
            -o "App/${{env.outputAppFolder}}"

      - name: Create Executable Tarball
        run: |
          cd App
          tar -czf ../${{ env.applicationNameLinux }}-${{ steps.version.outputs.prop }}-linux-x64-executable.tar.gz .

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-executable
          path: "${{ env.applicationNameLinux }}-${{ steps.version.outputs.prop }}-linux-x64-executable.tar.gz"

  build_arch:
    name: Build Arch Linux Package
    runs-on: ubuntu-latest
    container: archlinux:latest
    outputs:
      version: ${{ steps.version.outputs.prop }}
      arch_file: ${{ steps.archpkg.outputs.file }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Move automation files out to root
        run: |
          mv automation/* .

      - name: get version
        id: version
        uses: notiz-dev/github-action-json-property@7c8cf5cc36eb85d8d287a8086a39dac59628eb31
        with:
          path: "Packages/${{env.packageName}}/package.json"
          prop_path: "version"

      - name: Update PKGBUILD version
        run: |
          VERSION=${{ steps.version.outputs.prop }}
          PKGVER=$(echo "$VERSION" | sed -E 's/-([a-z]+)\.([0-9]+)/\1\2/')
          sed -i "s/9.9.9hyphenated9999/$VERSION/g" PKGBUILD
          sed -i "s/9.9.9pkgver9999/$PKGVER/g" PKGBUILD

      - name: Install base-devel and dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel git sudo npm nodejs dotnet-sdk dotnet-runtime webkit2gtk imagemagick

      - name: Build package with makepkg
        run: |
          useradd -m builder
          chown -R builder ./
          sudo -u builder makepkg -s --noconfirm --cleanbuild

      - name: Detect Arch package
        id: archpkg
        run: echo "file=$(ls *.pkg.tar.zst)" >> $GITHUB_OUTPUT
        
      - name: Upload Arch package artifact
        uses: actions/upload-artifact@v4
        with:
          name: arch-executable
          path: ${{ steps.archpkg.outputs.file }}

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.ref_name == 'main'
    needs: [build_windows, build_linux, build_arch]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Make Release
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5
        with:
          tag_name: ${{ needs.build_windows.outputs.version }}
          files: |
            windows-executable/${{ env.applicationNameWindows }}-${{ needs.build_windows.outputs.version }}-windows-x64-executable.zip
            linux-executable/${{ env.applicationNameLinux }}-${{ needs.build_linux.outputs.version }}-linux-x64-executable.tar.gz
            arch-executable/${{ needs.build_arch.outputs.arch_file }}
